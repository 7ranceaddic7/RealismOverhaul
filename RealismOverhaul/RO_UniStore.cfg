@PART[US_R200_EVA_EVAX]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	!RESOURCE[Oxygen]
	{
	}
	@RESOURCE[EVA?Propellant]
	{
		@amount = 4
		@maxAmount = 4
	}
	!RESOURCE[Water]
	{
	}
	!RESOURCE[ElectricCharge]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		basemass = -1
		type = ServiceModule
		volume = 10
		TANK
		{
			name = Oxygen
			amount = 183.333
			maxAmount = 183.333
		}
		TANK
		{
			name = EVA Propellant
			amount = 5
			maxAmount = 5
		}
		TANK
		{
			name = Water
			amount = 0.567
			maxAmount = 0.567
		}
		TANK
		{
			name = ElectricCharge
			amount = 500
			maxAmount = 500
			utilization = 500
		}
	}
}
@PART[US_Radial_Oxygen]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	!RESOURCE[Oxygen]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		basemass = -1
		type = ServiceModule
		volume = 8
		TANK
		{
			name = Oxygen
			amount = 1600
			maxAmount = 1600
		}
	}
}
@PART[US_R90_Wedge_ScienceBay]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.015
}
@PART[US_Wedge_KASContainer]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.020
	@MODULE[KASModuleContainer]
	{
		@maxSize = 80
	}
}
@PART[US_q_Wedge_Water]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.050
	!RESOURCE[Water]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		basemass = -1
		type = ServiceModule
		volume = 32
		TANK
		{
			name = Water
			amount = 32
			maxAmount = 32
		}
	}
}
@PART[US_m_Wedge_Oxygen]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.030
	!RESOURCE[Oxygen]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		basemass = -1
		type = ServiceModule
		volume = 32
		TANK
		{
			name = LiquidOxygen
			amount = 32
			maxAmount = 32
		}
	}
}
@PART[US_l_Wedge_Hydrogen]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.035
	!RESOURCE[Hydrogen]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		basemass = -1
		type = ServiceModule
		volume = 32
		TANK
		{
			name = LiquidH2
			amount = 32
			maxAmount = 32
		}
	}
}
@PART[US_j_Wedge_Elektron]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.075
	@MODULE[ModuleGenerator]
	{
		requiresAllinputs = true
		resourceThreshold = 0.01
		@INPUT_RESOURCE[Water]
		{
			@rate = 0.0000462963
		}
		@INPUT_RESOURCE[ElectricCharge]
		{
			@rate = 0.166667
		}
		@OUTPUT_RESOURCE[Hydrogen]
		{
			@rate = 0.00227382
		}
		@OUTPUT_RESOURCE[Oxygen]
		{
			@rate = 0.00115741
		}
	}
}
@PART[US_i_Wedge_FuelCell]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
	@mass = 0.075

        @description = This small fuel cell consumes hydrogen and oxygen to produce potable water, heat, and a moderate electrical output. Rated to 710W, and with enough water output to sustain two kerbonauts, this cell has integrated resources to run just over two days. Although much safer for Kerbals than RTGs, please don't tease the stirring fans.

        // Generator modelled on RedAV8R's Apollo service module work

        !MODULE[ModuleGenerator]

        MODULE
        {
            name            = TacGenericConverter
            converterName   = Fuel Cell

            // ConversationRate is the number of kW we want produced
            // This unit is rated to 710W, which is half an Apollo unit.
            conversionRate  = 0.71

            // The 'false' in outputResources means we stop processing
            // if Water is full (otherwise the cell overflows).
            // We *will* continue running if EC is full. Write yourself
            // a kOS controller if you want to throttle that. :)

            inputResources  = LiquidH2, .0000584244, LiquidOxygen, .0000443399
            outputResources = ElectricCharge, 1, true, Water, .0000443654, false
        }

	!RESOURCE[Hydrogen]
	{
	}
	!RESOURCE[Oxygen]
	{
	}
	!RESOURCE[Water]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		basemass = -1
		type = ServiceModule
		volume = 20
		TANK
		{
			name = LiquidOxygen
			amount = 8
			maxAmount = 8
		}
		TANK
		{
			name = LiquidH2
			amount = 6
			maxAmount = 6
		}
                TANK
                {
                        name = Water
                        amount = 0
                        maxAmount = 6
                }
	}
}
@PART[US_e_Dec_SafetyDecoupler250]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
}
@PART[US_f_Dec_SafetyDecoupler125]:FOR[RealismOverhaul]
{
	%RSSROConfig = true
}

// The cores contain integrated equipment to convert LOX into O2.
// These are based upon RedAV8R's Apollo CSM work.
//
// The QuadCore can support up to  4 kerbonauts
// The OctoCore can support up to 16 kerbonauts
//
// By using TacGenericConverters, these will actally run at a level to
// support the number of kerbonauts on the vessel. :)

@PART[US_d_Hub_Octocore]:FOR[RealismOverhaul]
{
	%RSSROConfig = true

        MODULE
        {
                name            = TacGenericConverter
                converterName   = Oxygen Supply
                conversionRate  = 16

                // The 'false' in outputResources means we stop processing
                // if oxygen is full. :)

                inputResources  = LiquidOxygen, .0000073936, ElectricCharge, 0.05
                outputResources = Oxygen, 0.006365, false
        }

}
@PART[US_c_Hub_Quadcore]:FOR[RealismOverhaul]
{
	%RSSROConfig = true

        MODULE
        {
                name            = TacGenericConverter
                converterName   = Oxygen Supply
                conversionRate  = 4

                // The 'false' in outputResources means we stop processing
                // if oxygen is full. :)

                inputResources  = LiquidOxygen, .0000073936, ElectricCharge, 0.05
                outputResources = Oxygen, 0.006365, false
        }
}
