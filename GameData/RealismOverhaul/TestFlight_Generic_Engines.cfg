@PART[*]:HAS[@TESTFLIGHT[*]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightInterop
	}
}

// Preprocess
@PART[*]:HAS[@TESTFLIGHT[*]]:FOR[zTestFlight]
{
	@TESTFLIGHT,*
	{
		failChanceStart = #$cycleReliabilityStart$
		@failChanceStart *= -1
		@failChanceStart += 1
		@failChanceStart /= #$ratedBurnTime$
		failChanceEnd = #$cycleReliabilityEnd$
		@failChanceEnd *= -1
		@failChanceEnd += 1
		@failChanceEnd /= #$ratedBurnTime$
		kinkV = 0.75
		kinkH = 0.25
		dataMult = 1.0
		qMult = 1.0
		tech =  
	}
	@TESTFLIGHT,*:HAS[#reliabilityMidV[*]]
	{
		@kinkV = #$reliabilityMidV$
	}
	@TESTFLIGHT,*:HAS[#reliabilityMidH[*]]
	{
		@kinkH = #$reliabilityMidH$
	}
	@TESTFLIGHT,*:HAS[#reliabilityDataRateMultiplier[*]]
	{
		@dataMult = #$reliabilityDataRateMultiplier$
	}
	@TESTFLIGHT,*:HAS[#ignitionDynPresFailMultiplier[*]]
	{
		@qMult = #$ignitionDynPresFailMultiplier$
	}
	@TESTFLIGHT,*:HAS[#techTransfer[*]]
	{
		@tech = #$techTransfer$
	}
}

// Create the nodes.
@PART[*]:HAS[@TESTFLIGHT[*]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightCore
		title = #$../TESTFLIGHT/name$
		temp = engineConfig =
		configuration = #$temp$ $../TESTFLIGHT/name$:$../TESTFLIGHT/name$
		!temp = DEL
		maxData = 10000
		
		techTransferMax = 2000
		techTransfer = #$../TESTFLIGHT/tech$
	}
	MODULE
	{
		name = FlightDataRecorder_Engine
		configuration = #$../TESTFLIGHT/name$
		flightDataEngineerModifier = 0.4
		flightDataMultiplier = 3.0
		@flightDataMultiplier *= #$../TESTFLIGHT/dataMult$
	}
	MODULE
	{
		name = TestFlightReliability
		configuration = #$../TESTFLIGHT/name$
		reliabilityCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../../TESTFLIGHT/failChanceStart$
			
			// Calculate kink time
			key20 = #$../../TESTFLIGHT/kinkH$
			@key20 *= 5000
			@key20 += 1000
			
			// Calculate kink value
			key21 = #$../../TESTFLIGHT/failChanceEnd$
			@key21 -= #$../../TESTFLIGHT/failChanceStart$
			@key21 *= #$../../TESTFLIGHT/kinkH$
			@key21 += #$../../TESTFLIGHT/failChanceStart$
			
			// Calculate kink tangent
			key22 = #$../../TESTFLIGHT/failChanceEnd$
			@key22 -= #$../../TESTFLIGHT/failChanceStart$
			@key22 *= 0.0001
			
			// Create end key
			key30 = 10000
			key31 = #$../../TESTFLIGHT/failChanceEnd$
			key32 = 0 // flat intangent
			
			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$
			
			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
	}
	MODULE
	{
		name = TestFlightReliability_EngineCycle
		configuration = #$../TESTFLIGHT/name$
		ratedBurnTime = #$../TESTFLIGHT/ratedBurnTime$
		cycle
		{
			key = 0.00 10.00
			key = 5.00 1.00 -0.8 0
			btPlus = #$../../TESTFLIGHT/ratedBurnTime$
			@btPlus += 5 // cushion
			bt15 = #$../../TESTFLIGHT/ratedBurnTime$
			@bt15 *= 1.5
			@bt15 += 5
			key = #$btPlus$ 1 0 0
			key = #$bt15$ 100 0 0
			!btPlus = DEL
			!bt15 = DEL
		}
	}
	MODULE
	{
		name = TestFlightFailure_ShutdownEngine
		configuration = #$../TESTFLIGHT/name$
		REPAIR
		{
			canBeRepairedInFlight = True
			dataSize = 1
			dataScale = 1
			repairChance = 75
			canBeRepairedOnSplashed = True
			canBeRepairedByRemote = True
		}
		duFail = 100
		weight = 32
		failureType = software
		failureTitle = Engine Shutdown
		duRepair = 50
		severity = failure
	}
	MODULE
	{
		name = TestFlightFailure_IgnitionFail
		configuration = #$../TESTFLIGHT/name$
		
		restoreIgnitionCharge = False
		duFail = 300
		oneShot = True
		failureType = mechanical
		failureTitle = Failed to ignite
		pressureCurve
		{
			key = 0 1.0
			key = 5000 0.7
			key = 50000 0.15
			@key,*[0, ] *= #$../../TESTFLIGHT/qMult$
		}
		baseIgnitionChance
		{
			// Create first key
			key10 = 0
			key11 = #$../../TESTFLIGHT/ignitionReliabilityStart$
			
			// Calculate kink time
			key20 = #$../../TESTFLIGHT/kinkH$
			@key20 *= 5000
			@key20 += 1000
			
			// Calculate kink value
			key21 = #$../../TESTFLIGHT/ignitionReliabilityEnd$
			@key21 -= #$../../TESTFLIGHT/ignitionReliabilityStart$
			@key21 *= #$../../TESTFLIGHT/kinkH$
			@key21 += #$../../TESTFLIGHT/ignitionReliabilityStart$
			
			// Calculate kink tangent
			// tangent = Y/X
			key22 = #$../../TESTFLIGHT/ignitionReliabilityEnd$
			@key22 -= #$../../TESTFLIGHT/ignitionReliabilityStart$
			@key22 *= 0.0001 // the X delta, 0 to 10000
			
			// Create end key
			key30 = 10000
			key31 = #$../../TESTFLIGHT/ignitionReliabilityEnd$
			key32 = 0 // flat intangent
			
			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$
			
			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
		ignorePressureOnPad = True // doesn't actually do anything...
		severity = major
	}
	MODULE
	{
		name = TestFlightFailure_ReducedMaxThrust
		configuration = #$../TESTFLIGHT/name$
		REPAIR
		{
			canBeRepairedInFlight = False
			canBeRepairedOnSplashed = False
			canBeRepairedByRemote = False
			repairChance = 75
		}
		duFail = 100
		weight = 16
		failureType = mechanical
		failureTitle = Loss of Thrust
		duRepair = 250
		severity = failure
	}
	MODULE
	{
		name = TestFlightFailure_Explode
		configuration = #$../TESTFLIGHT/name$
		failureTitle = Explosion!
		duFail = 400
		weight = 2
		failureType = mechanical
		severity = major
	}
	!TESTFLIGHT {} // remove the node we processed
	
	MM_PATCH_LOOP {}
}